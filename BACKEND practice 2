
const express = require('express');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
const PORT = 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'fallback_secret';

app.use(express.json());

let accounts = {
    'user1': { balance: 1000, password: 'password123' }
};

const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(403).json({ message: 'Invalid or expired token' });
    }

    const token = authHeader.split(' ')[1];

    if (!token) {
        return res.status(403).json({ message: 'Invalid or expired token' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ message: 'Invalid or expired token' });
        }
        
        req.user = user;
        next();
    });
};

app.post('/login', (req, res) => {
    const { username, password } = req.body;

    const userAccount = accounts[username];
    if (!userAccount || userAccount.password !== password) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    const userPayload = { username: username };

    const token = jwt.sign(userPayload, JWT_SECRET, { expiresIn: '1h' });

    res.status(200).json({ token: token });
});

app.get('/balance', authenticateToken, (req, res) => {
    const { username } = req.user;
    const balance = accounts[username].balance;

    res.status(200).json({ balance: balance });
});

app.post('/deposit', authenticateToken, (req, res) => {
    const { username } = req.user;
    const { amount } = req.body;
    
    const depositAmount = parseFloat(amount);
    if (isNaN(depositAmount) || depositAmount <= 0) {
        return res.status(400).json({ message: 'Invalid deposit amount' });
    }

    accounts[username].balance += depositAmount;
    const newBalance = accounts[username].balance;

    res.status(200).json({ 
        message: `Deposited $${depositAmount}`,
        newBalance: newBalance 
    });
});

app.post('/withdraw', authenticateToken, (req, res) => {
    const { username } = req.user;
    const { amount } = req.body;
    
    const withdrawalAmount = parseFloat(amount);
    if (isNaN(withdrawalAmount) || withdrawalAmount <= 0) {
        return res.status(400).json({ message: 'Invalid withdrawal amount' });
    }

    if (accounts[username].balance < withdrawalAmount) {
        return res.status(400).json({ message: 'Insufficient balance' });
    }

    accounts[username].balance -= withdrawalAmount;
    const newBalance = accounts[username].balance;

    res.status(200).json({ 
        message: `Withdrew $${withdrawalAmount}`,
        newBalance: newBalance 
    });
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
