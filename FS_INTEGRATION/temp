const express = require('express');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
const PORT = 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'fallback_secret';

app.use(express.json());

const mockUser = { id: 1, username: 'testuser', password: 'password123' };

const verifyToken = (req, res, next) => {
    // 1. Get the Authorization header
    const authHeader = req.headers['authorization'];

    // 2. Check for missing header
    if (!authHeader) {
        return res.status(401).json({ message: 'Token missing' });
    }

    const [scheme, token] = authHeader.split(' ');

    if (scheme !== 'Bearer' || !token) {
        return res.status(401).json({ message: 'Token missing' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ message: 'Invalid or expired token' });
        }
        
        req.user = user;
        next();
    });
};


app.post('/login', (req, res) => {
    const { username, password } = req.body;

    if (username !== mockUser.username || password !== mockUser.password) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    const userPayload = { id: mockUser.id, username: mockUser.username };

    const token = jwt.sign(userPayload, JWT_SECRET, { expiresIn: '1h' });

    res.status(200).json({ token: token });
});

app.get('/protected', verifyToken, (req, res) => {
    res.status(200).json({
        message: 'You have accessed a protected route!',
        user: req.user
    });
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
