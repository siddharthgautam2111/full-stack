const express = require('express');
const app = express();
const PORT = 3000;

// --- 1. Custom Logging Middleware (Applied Globally) ---

const requestLogger = (req, res, next) => {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${req.method} ${req.url}`);
    next(); // Pass control to the next middleware or route handler
};

app.use(requestLogger);

// --- 2. Bearer Token Authentication Middleware (Applied only to /protected) ---

const authenticateToken = (req, res, next) => {
    const SECRET_TOKEN = 'mysecrettoken';

    const authHeader = req.headers['authorization'];

    if (!authHeader) {
        return res.status(401).json({ 
            message: 'Authorization header missing or incorrect' 
        });
    }

    const [scheme, token] = authHeader.split(' ');

    if (scheme !== 'Bearer' || token !== SECRET_TOKEN) {
        return res.status(401).json({ 
            message: 'Authorization header missing or incorrect' 
        });
    }

    next();
};

// --- 3. Define Routes ---

app.get('/public', (req, res) => {
    res.status(200).send('This is a public route. No authentication required.');
});

app.get('/protected', authenticateToken, (req, res) => {
    res.status(200).send('You have accessed a protected route with a valid Bearer token!');
});

// --- 4. Start the Server ---

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
