const express = require('express');
const mongoose = require('mongoose');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI;

mongoose.connect(MONGO_URI)
    .then(() => console.log('MongoDB connected successfully'))
    .catch(err => {
        console.error('MongoDB connection error:', err);
        process.exit(1);
    });

const UserSchema = new mongoose.Schema({
    name: String,
    balance: Number,
});

const User = mongoose.model('User', UserSchema);

app.use(express.json());

app.post('/create-users', async (req, res) => {
    try {
        await User.deleteMany({}); 

        const alice = new User({ name: 'Alice', balance: 1000 });
        const bob = new User({ name: 'Bob', balance: 500 });

        const savedUsers = await User.insertMany([alice, bob]);

        const usersOutput = savedUsers.map(user => ({
            name: user.name,
            balance: user.balance,
            _id: user._id.toHexString(),
            __v: user.__v 
        }));

        res.status(201).json({ 
            message: 'Users created', 
            users: usersOutput 
        });

    } catch (error) {
        res.status(500).json({ message: 'Error creating users', error: error.message });
    }
});

app.post('/transfer', async (req, res) => {
    const { fromUserId, toUserId, amount } = req.body;
    const transferAmount = Number(amount);

    if (isNaN(transferAmount) || transferAmount <= 0) {
        return res.status(400).json({ message: 'Invalid transfer amount' });
    }

    if (fromUserId === toUserId) {
        return res.status(400).json({ message: 'Cannot transfer to the same account' });
    }

    try {
        const sender = await User.findById(fromUserId);
        const receiver = await User.findById(toUserId);

        if (!sender || !receiver) {
            return res.status(404).json({ message: 'One or both users not found.' });
        }

        if (sender.balance < transferAmount) {
            return res.status(400).json({ message: 'Insufficient balance' });
        }

        sender.balance -= transferAmount;
        await sender.save();

        receiver.balance += transferAmount;
        await receiver.save();

        res.status(200).json({
            message: `Transferred $${transferAmount} from ${sender.name} to ${receiver.name}`,
            senderBalance: sender.balance,
            receiverBalance: receiver.balance
        });

    } catch (error) {
        res.status(500).json({ message: 'Transfer failed due to a server error.', error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
