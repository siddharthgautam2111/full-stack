const express = require('express');
const jwt = require('jsonwebtoken');
require('dotenv').config();

const app = express();
const PORT = 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'fallback_secret';

app.use(express.json());

const mockUsers = [
    { id: 1, username: 'adminUser', password: 'admin123', role: 'Admin' },
    { id: 2, username: 'modUser', password: 'mod123', role: 'Moderator' },
    { id: 3, username: 'basicUser', password: 'user123', role: 'User' }
];

const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authentication required' });
    }

    const token = authHeader.split(' ')[1];

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ message: 'Invalid or expired token' });
        }
        
        req.user = user;
        next();
    });
};

const authorizeRole = (requiredRole) => {
    return (req, res, next) => {
        if (!req.user || !req.user.role) {
            return res.status(401).json({ message: 'User role not found' });
        }

        if (req.user.role === requiredRole) {
            next();
        } else {
            return res.status(403).json({ message: 'Access denied: insufficient role' });
        }
    };
};

app.post('/login', (req, res) => {
    const { username, password } = req.body;

    const user = mockUsers.find(u => u.username === username && u.password === password);

    if (!user) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    const userPayload = { id: user.id, username: user.username, role: user.role };

    const token = jwt.sign(userPayload, JWT_SECRET, { expiresIn: '1h' });

    res.status(200).json({ token: token });
});

app.get('/user-profile', authenticateToken, (req, res) => {
    res.status(200).json({
        message: `Welcome to your profile, ${req.user.username}`,
        user: req.user
    });
});

app.get('/moderator-panel', authenticateToken, authorizeRole('Moderator'), (req, res) => {
    res.status(200).json({
        message: 'Welcome to the Moderator panel, access granted.',
        user: req.user
    });
});

app.get('/admin-dashboard', authenticateToken, authorizeRole('Admin'), (req, res) => {
    res.status(200).json({
        message: 'Welcome to the Admin dashboard',
        user: req.user
    });
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
